import React, { useState, useEffect } from 'react';
import { User, ChevronUp, ChevronDown, Award, School, Trophy, CircuitBoard, RefreshCw, Trash2 } from 'lucide-react';

// API URL - change this to your backend URL
const API_URL = 'http://localhost:8000';

// Available cartoon avatars
const AVATARS = [
  { id: 'robot1', emoji: '🤖', name: 'Robot' },
  { id: 'rocket', emoji: '🚀', name: 'Rocket' },
  { id: 'scientist', emoji: '🧑‍🔬', name: 'Scientist' },
  { id: 'alien', emoji: '👽', name: 'Alien' },
  { id: 'computer', emoji: '💻', name: 'Computer' },
  { id: 'gear', emoji: '⚙️', name: 'Gear' },
  { id: 'robot2', emoji: '🦾', name: 'Robotic Arm' },
  { id: 'satellite', emoji: '🛰️', name: 'Satellite' }
];

const RoboticsLeaderboard = () => {
  const [leaders, setLeaders] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [showAddForm, setShowAddForm] = useState(false);
  const [newParticipant, setNewParticipant] = useState({
    name: '',
    school: '',
    avatar: 'robot1',
    score: 0
  });
  const [scrollPosition, setScrollPosition] = useState(0);

  // Fetch participants from API
  const fetchParticipants = async () => {
    try {
      setLoading(true);
      const response = await fetch(`${API_URL}/participants/`);
      
      if (!response.ok) {
        throw new Error(`Error: ${response.status}`);
      }
      
      const data = await response.json();
      setLeaders(data);
      setError(null);
    } catch (err) {
      console.error('Error fetching participants:', err);
      setError('Failed to load leaderboard data. Please try again later.');
    } finally {
      setLoading(false);
    }
  };

  // Load participants on component mount
  useEffect(() => {
    fetchParticipants();
  }, []);

  // Handle scroll for parallax effect
  useEffect(() => {
    const handleScroll = () => {
      setScrollPosition(window.scrollY);
    };

    window.addEventListener('scroll', handleScroll);
    return () => window.removeEventListener('scroll', handleScroll);
  }, []);

  // Handle input changes for new participant form
  const handleInputChange = (e) => {
    const { name, value } = e.target;
    setNewParticipant({
      ...newParticipant,
      [name]: value
    });
  };

  // Add new participant
  const handleSubmit = async (e) => {
    e.preventDefault();
    
    // Validation
    if (!newParticipant.name || !newParticipant.school) {
      alert('Please fill out all fields');
      return;
    }
    
    try {
      const response = await fetch(`${API_URL}/participants/`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(newParticipant),
      });
      
      if (!response.ok) {
        throw new Error(`Error: ${response.status}`);
      }
      
      // Refresh participant list
      await fetchParticipants();
      
      // Reset form
      setNewParticipant({
        name: '',
        school: '',
        avatar: 'robot1',
        score: 0
      });
      
      setShowAddForm(false);
    } catch (err) {
      console.error('Error adding participant:', err);
      alert('Failed to add new challenger. Please try again.');
    }
  };
  
  // Delete a participant
  const handleDelete = async (id) => {
    if (!confirm('Are you sure you want to delete this participant?')) {
      return;
    }
    
    try {
      const response = await fetch(`${API_URL}/participants/${id}`, {
        method: 'DELETE',
      });
      
      if (!response.ok) {
        throw new Error(`Error: ${response.status}`);
      }
      
      // Refresh participant list
      await fetchParticipants();
    } catch (err) {
      console.error('Error deleting participant:', err);
      alert('Failed to delete participant. Please try again.');
    }
  };

  // Get medal for top 3 participants
  const getMedal = (index) => {
    if (index === 0) return <Trophy className="text-yellow-600" />;
    if (index === 1) return <Trophy className="text-gray-500" />;
    if (index === 2) return <Trophy className="text-amber-700" />;
    return null;
  };

  // Get avatar emoji by ID
  const getAvatarEmoji = (avatarId) => {
    const avatar = AVATARS.find(a => a.id === avatarId);
    return avatar ? avatar.emoji : '🤖';
  };

  return (
    <div className="min-h-screen text-gray-800 font-sans relative" style={{ fontFamily: "'Audiowide', sans-serif" }}>
      {/* We'll add this to the head in the index.html file:
        <link href="https://fonts.googleapis.com/css2?family=Orbitron:wght@400;500;700;900&display=swap" rel="stylesheet">
      */}
      {/* Background with parallax effect */}
      <div
        className="fixed inset-0 bg-cover bg-center opacity-80 z-0"
        style={{
          backgroundImage: "url('/images/background.jpg')",
          transform: `translateY(${scrollPosition * 0.15}px)`
        }}
      ></div>
      
      {/* Main content */}
      <div className="relative z-10 container mx-auto px-4 py-8">
        <header className="text-center mb-8">
          <h1 className="text-4xl md:text-5xl font-black mb-2 text-transparent bg-clip-text bg-gradient-to-r from-orange-600 to-red-700" style={{ textShadow: '0 0 10px rgba(255,165,0,0.3)' }}>
            ROBOTICS MAZE CHALLENGE
          </h1>
          <div className="relative overflow-hidden my-2">
            <p className="text-2xl md:text-3xl text-gray-700 tracking-wider font-bold relative z-10">
              LEADERBOARD
            </p>
            <div className="absolute top-0 left-0 h-full w-20 bg-gradient-to-r from-transparent via-blue-400 to-transparent opacity-70 z-0" 
              style={{ 
                animation: 'scanlight 4s ease-in-out infinite',
                filter: 'blur(8px)'
              }}></div>
          </div>
          <style jsx>{`
            @keyframes scanlight {
              0% { transform: translateX(150%); }
              50% { transform: translateX(1300%); }
              100% { transform: translateX(150%); }
            }
          `}</style>
          
          <div className="flex justify-center space-x-4">
            {!showAddForm && (
              <button
                className="bg-orange-500 hover:bg-orange-600 text-white font-bold py-2 px-4 rounded-full transition-all flex items-center"
                onClick={() => setShowAddForm(true)}
              >
                <User className="mr-2 h-5 w-5" />
                Add New Challenger
              </button>
            )}
            
            <button
              className="bg-gray-700 hover:bg-gray-800 text-white font-bold py-2 px-4 rounded-full transition-all flex items-center"
              onClick={fetchParticipants}
              disabled={loading}
            >
              <RefreshCw className={`mr-2 h-5 w-5 ${loading ? 'animate-spin' : ''}`} />
              Refresh
            </button>
          </div>
          
          {error && (
            <div className="mt-4 p-3 bg-red-100 border border-red-400 rounded text-red-700">
              {error}
            </div>
          )}
        </header>
        
        {/* Add Participant Form */}
        {showAddForm && (
          <div className="max-w-md mx-auto bg-white p-6 rounded-lg shadow-lg mb-8 border border-orange-300">
            <h2 className="text-xl font-bold mb-4 flex items-center text-gray-800">
              <CircuitBoard className="mr-2 text-orange-500" /> New Challenger
            </h2>
            
            <form onSubmit={handleSubmit}>
              <div className="mb-4">
                <label className="block text-gray-700 mb-2">Team Name</label>
                <input
                  type="text"
                  name="name"
                  value={newParticipant.name}
                  onChange={handleInputChange}
                  className="w-full bg-gray-50 border border-gray-300 rounded p-2 text-gray-800"
                  placeholder="Enter team name"
                />
              </div>
              
              <div className="mb-4">
                <label className="block text-gray-700 mb-2">School</label>
                <input
                  type="text"
                  name="school"
                  value={newParticipant.school}
                  onChange={handleInputChange}
                  className="w-full bg-gray-50 border border-gray-300 rounded p-2 text-gray-800"
                  placeholder="Enter school name"
                />
              </div>
              
              <div className="mb-4">
                <label className="block text-gray-700 mb-2">Score</label>
                <input
                  type="number"
                  name="score"
                  value={newParticipant.score}
                  onChange={handleInputChange}
                  className="w-full bg-gray-50 border border-gray-300 rounded p-2 text-gray-800"
                  placeholder="Enter score"
                />
              </div>
              
              <div className="mb-6">
                <label className="block text-gray-700 mb-2">Choose Avatar</label>
                <div className="grid grid-cols-4 gap-2">
                  {AVATARS.map((avatar) => (
                    <div
                      key={avatar.id}
                      className={`cursor-pointer text-center p-2 rounded ${
                        newParticipant.avatar === avatar.id
                          ? 'bg-orange-500 text-white'
                          : 'bg-gray-100 hover:bg-gray-200 text-gray-800'
                      }`}
                      onClick={() => setNewParticipant({ ...newParticipant, avatar: avatar.id })}
                    >
                      <div className="text-2xl">{avatar.emoji}</div>
                      <div className="text-xs mt-1">{avatar.name}</div>
                    </div>
                  ))}
                </div>
              </div>
              
              <div className="flex gap-3">
                <button
                  type="submit"
                  className="bg-orange-500 hover:bg-orange-600 text-white font-bold py-2 px-4 rounded-full w-1/2"
                >
                  Save
                </button>
                <button
                  type="button"
                  onClick={() => setShowAddForm(false)}
                  className="bg-gray-500 hover:bg-gray-600 text-white font-bold py-2 px-4 rounded-full w-1/2"
                >
                  Cancel
                </button>
              </div>
            </form>
          </div>
        )}
        
        {/* Leaderboard table */}
        <div className="bg-white bg-opacity-95 rounded-lg shadow-lg overflow-hidden border border-orange-300">
          {loading && leaders.length === 0 ? (
            <div className="py-12 text-center">
              <div className="mx-auto w-12 h-12 border-4 border-t-orange-500 border-r-transparent border-b-orange-500 border-l-transparent rounded-full animate-spin mb-4"></div>
              <p className="text-gray-600">Loading leaderboard data...</p>
            </div>
          ) : leaders.length === 0 ? (
            <div className="py-12 text-center">
              <p className="text-gray-600 mb-4">No participants yet.</p>
              <button
                className="bg-orange-500 hover:bg-orange-600 text-white font-bold py-2 px-4 rounded-full transition-all"
                onClick={() => setShowAddForm(true)}
              >
                Add Your First Challenger
              </button>
            </div>
          ) : (
            <table className="w-full">
              <thead>
                <tr className="bg-orange-100">
                  <th className="py-3 px-4 text-left text-gray-700">Rank</th>
                  <th className="py-3 px-4 text-left text-gray-700">Avatar</th>
                  <th className="py-3 px-4 text-left text-gray-700">Team</th>
                  <th className="py-3 px-4 text-left text-gray-700">
                    <div className="flex items-center">
                      <School className="mr-2 h-4 w-4 text-gray-700" />
                      School
                    </div>
                  </th>
                  <th className="py-3 px-4 text-right text-gray-700">
                    <div className="flex items-center justify-end">
                      <Award className="mr-2 h-4 w-4 text-gray-700" />
                      Score
                    </div>
                  </th>
                  <th className="py-3 px-4 text-center text-gray-700">Actions</th>
                </tr>
              </thead>
              <tbody>
                {leaders.map((leader, index) => (
                  <tr
                    key={leader.id}
                    className={`border-b border-gray-200 ${
                      index < 3 ? 'bg-orange-50' : ''
                    } hover:bg-gray-100 transition-colors`}
                  >
                    <td className="py-3 px-4">
                      <div className="flex items-center">
                        <span className="font-bold mr-2 text-gray-800">{index + 1}</span>
                        {getMedal(index)}
                      </div>
                    </td>
                    <td className="py-3 px-4">
                      <div className="bg-orange-100 w-10 h-10 rounded-full flex items-center justify-center text-2xl">
                        {getAvatarEmoji(leader.avatar)}
                      </div>
                    </td>
                    <td className="py-3 px-4 font-medium text-gray-800">{leader.name}</td>
                    <td className="py-3 px-4 text-gray-600">{leader.school}</td>
                    <td className="py-3 px-4 text-right font-bold text-orange-600">
                      {leader.score}
                    </td>
                    <td className="py-3 px-4 text-center">
                      <button
                        className="text-gray-500 hover:text-red-600 transition-colors"
                        onClick={() => handleDelete(leader.id)}
                        title="Delete"
                      >
                        <Trash2 className="h-5 w-5" />
                      </button>
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
          )}
        </div>
        
        <footer className="mt-8 text-center text-gray-600 text-sm">
          <p>© 2025 Robotics Maze Challenge</p>
        </footer>
      </div>
    </div>
  );
};

export default RoboticsLeaderboard;